#!/bin/bash
# -*- mode: sh; sh-basic-offset: 2; indent-tabs-mode: nil; -*-
# vim:set ft=sh et sw=2 ts=2:
#
# Test suite for ddns-functions
#
# shellcheck disable=SC2034,SC1090,SC2123

NMG_XTEST=${NMG_XTEST:-conf/nmg_xtest}
{ [[ -r ${NMG_XTEST} ]] && . "${NMG_XTEST}"; } ||
  { echo >&2 "Unable to load ${NMG_XTEST}"; exit 2; }

# min-version for tests
NMDDNS_REQUIRED="1.4.4"

xtest::onexit::ddns() {
  # remove ddns tmpfiles
  [[ ${TEST_OUT-} ]] || return 0
  xrm "$TEST_OUT/ddns-state A"
  xrm "$TEST_OUT/ddns-state"
  xrm "$TEST_OUT/ddns-test.exe"
}

xtest::group4::ddns() {
  local out xpat xstate cnf

  # don't use helper until we're ready
  local NMDDNS_HELPER
  unset NMDDNS_HELPER

  shtest::title "nmddns tests"

  shtest::prefix "nmddns_update"

  DDNS_ZONE=example.test DDNS_RREC_A_NAME=www.example.test
  xwrap nmddns_update A
  xtest D1 t "(<remove A>) returns true"
  xread_value out <<-EOF
	Removing www.example.test A
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	send
	EOF
  ftest D1f "$out" " - logs and removes A"

  export DIG_MOCK_FAIL=5
  xwrap nmddns_update A
  xtest D2 25 "(<dig fail 5>) returns 25"
  xread_value out <<-EOF
	ERR: FAIL(5) ${NMDDNS_DIG} @127.0.0.1 +short +retry=2 +time=3 +time=1 +retry=2 A www.example.test
	ERR: Removal of www.example.test A failed
	EOF
  ftest D2f "$out" " - logs error"
  unset DIG_MOCK_FAIL

  export NSUPDATE_MOCK_FAIL=5
  xwrap nmddns_update A
  xtest D3 5 "(<nsupdate fail 5>) returns 5"
  xread_value out <<-EOF
	Removing www.example.test A
	ERR: FAIL(5) ${NMDDNS_NSUPDATE} -t 3
	ERR: DNS update to server 127.0.0.1 failed for www.example.test A
	EOF
  ftest D3f "$out" " - logs error"
  unset NSUPDATE_MOCK_FAIL

  xwrap nmddns_update A 192.168.55.1
  xtest D4 t "(A <private>) returns true"
  xread_value out <<-EOF
	Removing www.example.test A
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	send
	EOF
  ftest D4f "$out" " - logs and removes A"

  DDNS_RREC_A_FALLBACK=203.0.113.8
  xwrap nmddns_update A 192.168.55.1/24
  xtest D5 t "(A <private>) FALLBACK returns true"
  xread_value out <<-EOF
	Setting www.example.test A to 203.0.113.8
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	update add www.example.test 600 A 203.0.113.8
	send
	EOF
  ftest D5f "$out" " - logs and sets A to fallback"
  unset DDNS_RREC_A_FALLBACK

  DDNS_RREC_A_PRIVATE=1
  xpat="$TEST_OUT/ddns-state @RREC@"
  xstate=${xpat//@RREC@/A}
  xrm "$xstate"
  xwrap nmddns_update A 192.168.55.1/24 "$xpat"
  xtest D6 t "(A <private>) PRIVATE=1 returns true"
  xread_value out <<-EOF
	Setting www.example.test A to 192.168.55.1
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	update add www.example.test 600 A 192.168.55.1
	send
	EOF
  ftest D6f "$out" " - logs and sets A (no plen)"
  shtest::check_file D6s "$xstate" "192.168.55.1" " - generates state file (no plen)"
  xrm "$xstate"

  xstate="$TEST_OUT/ddns-state"
  xrm "$xstate"
  xwrap nmddns_update A "" "$xstate"
  xtest D7 t "(<bad state-pat>) returns true"
  xread_value out <<-EOF
	ERR: nmddns_update: <state-pat> must include string '@RREC@'
	Removing www.example.test A
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	send
	EOF
  ftest D7f "$out" " - logs error and performs action"
  [[ -f $xstate ]]
  xtest D7s f " - should not create state file"
  xrm "$xstate"

  xwrap nmddns_update
  xtest D8 f "(<no args>) returns false"
  ftest D8f "ERR: nmddns_update: missing <rrec>" " - logs error"

  unset DDNS_ZONE
  xwrap nmddns_update A
  xtest D9 5 "(A) unset ZONE, returns 5"
  ftest D9f "ERR: Missing required DDNS_ZONE config" " - logs error"

  unset DDNS_RREC_A_NAME
  xwrap nmddns_update A
  xtest D10 t "(A) unset NAME, returns true"
  ftest D10f "" " - does not log"

  DDNS_ZONE=example.test DDNS_RREC_A_NAME=www.example.test
  DDNS_RREC_A_VALUE="*"
  xwrap nmddns_update A 203.0.113.10
  xtest D11 t "(A) _VALUE=*, returns true"
  xread_value out <<-EOF
	Removing www.example.test A
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	send
	EOF
  ftest D11f "$out" " - logs and removes A"

  unset DDNS_RREC_A_VALUE
  xwrap nmddns_update A 203.0.113.10
  xtest D12 t "(A <pub>) returns true"
  xread_value out <<-EOF
	Setting www.example.test A to 203.0.113.10
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	update add www.example.test 600 A 203.0.113.10
	send
	EOF
  ftest D12f "$out" " - logs and adds A"

  xwrap nmddns_update A "203.0.113.10,203.0.113.20"
  xtest D13 t "(A <2 pub>) returns true"
  xread_value out <<-EOF
	Setting www.example.test A to 203.0.113.10,203.0.113.20
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	update add www.example.test 600 A 203.0.113.10
	update add www.example.test 600 A 203.0.113.20
	send
	EOF
  ftest D13f "$out" " - logs and adds both A records"

  xwrap nmddns_update A "203.0.113.4,192.0.2.8"
  xtest D14 t "(A <2 match>) returns true"
  ftest D14f "" " - does not log"

  DDNS_RREC_TXT_NAME=mail.example.test
  DDNS_RREC_TXT_LISTSEP=:
  xwrap nmddns_update TXT "\"some value\":\"another value\""
  xtest D15 t "(TXT <2 new vals>) returns true"
  xread_value out <<-EOF
	Setting mail.example.test TXT to "some value":"another value"
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete mail.example.test TXT
	update add mail.example.test 600 TXT "some value"
	update add mail.example.test 600 TXT "another value"
	send
	EOF
  ftest D15f "$out" " - logs and adds both TXT records"

  xwrap nmddns_update TXT "\"some value\":\"v=spf1 mx ~all\""
  xtest D16 t "(TXT <2 old vals>) returns true"
  ftest D16f "" " - does not log"

  nmddns_reset_config

  shtest::prefix "nmddns_update_all"

  # multi-update with overrides
  DDNS_ZONE=example.test DDNS_RREC_AAAA_NAME=ipv6.example.test
  DDNS_RREC_MX_NAME=www.example.test DDNS_RREC_MX_VALUE="5 mx.example.test."
  DDNS_RREC_MX_FALLBACK="10 backup.example.test."
  DDNS_RREC_A_NAME=www.example.test DDNS_RREC_A_VALUE="203.0.113.4"
  DDNS_TTL=300
  xwrap nmddns_update_all up 203.0.113.8 2001:db8:1000:2000::1/64
  xtest D21 t "(<up multi>) returns true"
  xread_value out <<-EOF
	Setting ipv6.example.test AAAA to 2001:db8:1000:2000::1
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete ipv6.example.test AAAA
	update add ipv6.example.test 300 AAAA 2001:db8:1000:2000::1
	send
	Setting www.example.test A to 203.0.113.4
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	update add www.example.test 300 A 203.0.113.4
	send
	Setting www.example.test MX to 5 mx.example.test.
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test MX
	update add www.example.test 300 MX 5 mx.example.test.
	send
	EOF
  ftest D21f "$out" " - performs actions"

  DDNS_NSUPDATE_TIMEOUT=5
  xwrap nmddns_update_all down
  xtest D22 t "(<down multi>) returns true"
  xread_value out <<-EOF
	Removing ipv6.example.test AAAA
	${NMDDNS_NSUPDATE} => nsupdate '-t' '5'
	server 127.0.0.1
	zone example.test
	update delete ipv6.example.test AAAA
	send
	Removing www.example.test A
	${NMDDNS_NSUPDATE} => nsupdate '-t' '5'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	send
	Setting www.example.test MX to 10 backup.example.test.
	${NMDDNS_NSUPDATE} => nsupdate '-t' '5'
	server 127.0.0.1
	zone example.test
	update delete www.example.test MX
	update add www.example.test 300 MX 10 backup.example.test.
	send
	EOF
  ftest D22f "$out" " - performs actions"

  shtest::prefix "nmddns_spawn_update"

  xrm "$XNOFILE"
  xwrap nmddns_spawn_update "$XNOFILE"
  xtest D31 t "(<no conf>) returns true"
  ftest D31f "" " - does nothing"

  cnf="$TEST_CONF/test-ddns.conf"
  xpat="$TEST_OUT/ddns-state @RREC@"
  xstate=${xpat//@RREC@/A}

  xrm "$xstate"; command -p touch "$xstate"
  xwrap nmddns_spawn_update "$cnf" "" "" "$xpat"
  xtest D32 t "(<no rrec>) returns true"
  ftest D32f "" " - does nothing"
  [[ -f $xstate ]]
  xtest D32s t " - leaves state file"

  command -p touch "$xstate"
  xwrap nmddns_spawn_update "$cnf" A "" "$xpat"
  xtest D33 t "(A) returns true"
  [[ -f $xstate ]]
  xtest D33s f " - removes state file"
  xrm "$xstate"
  xread_value out <<-EOF
	Removing www.example.test A
	${NMDDNS_NSUPDATE} => nsupdate '-t' '2'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	send
	EOF
  ftest D33f "$out" " - logs error, removes A rrec"

  xstate="$TEST_OUT/ddns-test.exe"
  xrm "$XFILE"
  echo "#!/bin/sh"$'\n'"echo >\"$xstate\" \"arg=\$*\"" > "$XFILE"
  command -p chmod +x "$XFILE"
  NMDDNS_HELPER=$XFILE
  xwrap nmddns_spawn_update "$cnf" A "" "$xpat"
  xtest D34 t "(<remove A>) returns true"
  ftest D34f "" " - does not log"
  shtest::last_check_ok && wait $!
  shtest::check_file D34o "$xstate" "arg=update $cnf A  $xpat" " - runs helper"
  xrm "$XFILE" "$xstate"

  shtest::prefix "nmddns_spawn_update_all"

  unset NMDDNS_HELPER

  xwrap nmddns_spawn_update_all up "$cnf"
  xtest D41 t "(up) returns true"
  xread_value out <<-EOF
  	Removing www.example.test A
	${NMDDNS_NSUPDATE} => nsupdate '-t' '2'
	server 127.0.0.1
	zone example.test
	update delete www.example.test A
	send
	EOF
  ftest D41f "${out}" " - removes current entry"

  nmddns_cleanup

  xtest::onexit::ddns
}

xtest::onexit::helper() {
  # remove helper tmpfiles
  [[ ${RUNDIR-} ]] || return 0
  xrm "${RUNDIR}/ddns-eth0-AAAA.state"
  xrm "${RUNDIR}/ddns-eth1-A.state"
  xrm "${RUNDIR}/ddns-br1-from-wan0-AAAA.state"
}

xtest::group5::helper() {

  local out state0 state1 state2

  shtest::title "nmddns-helper tests"

  shtest::prefix "nmddns-helper"

  command &>/dev/null -v "${NMDDNS_HELPER}"
  xtest H1 t "nmddns-helper is in path"
  shtest::last_check_ok || return 0

  state0="${RUNDIR}/ddns-eth0-AAAA.state"
  state1="${RUNDIR}/ddns-eth1-A.state"
  state2="${RUNDIR}/ddns-br1-from-wan0-AAAA.state"
  xrm "$state0" "$state1" "$state2"

  echo "2001:db8:4860:4860::8888/64" > "$state0"
  echo "10.0.10.12/24" > "$state1"
  echo "2001:db8:100:2:32fb:93c5:555:1/64" > "$state2"
  xwrap "${NMDDNS_HELPER}"
  xtest H2 t "(<no args>) 2 curr ip, returns true"
  ftest H2f "" " - does not log"

  echo "2001:db8:871a:28c1::2/64" > "$state0"
  xwrap "${NMDDNS_HELPER}"
  xtest H3 t "(<no args>) diff non-active ip, returns true"
  xread_value out <<-EOF
	Removing www.example.test AAAA
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test AAAA
	send
	EOF
  ftest H3f "$out" " - removes rrec"

  echo "2001:db8:871a:28c1::1/64" > "$state0"
  xwrap "${NMDDNS_HELPER}"
  xtest H4 t "(<no args>) diff active ip, returns true"
  xread_value out <<-EOF
	Setting www.example.test AAAA to 2001:db8:871a:28c1::1
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test AAAA
	update add www.example.test 600 AAAA 2001:db8:871a:28c1::1
	send
	EOF
  ftest H4f "$out" " - updates rrec"

  xrm "$state0" "$state1"
  xwrap "${NMDDNS_HELPER}"
  xtest H5 t "(<no args>) missing 2 states, returns true"
  xread_value out <<-EOF
	Removing www.example.test AAAA
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server 127.0.0.1
	zone example.test
	update delete www.example.test AAAA
	send
	Removing gateway.home.test A
	${NMDDNS_NSUPDATE} => nsupdate '-t' '3'
	server home.test
	zone home.test
	update delete gateway.home.test A
	send
	EOF
  ftest H5f "$out" " - removes rrecs"

  xtest::onexit::helper
}

test_version() {
  local NMG_REQUIRED="99.0.0" nmg_log_stderr=1

  shtest::title "Check version requirements"

  shtest::whitelist source

  (source 2>/dev/null "${NMDDNS}") &&
    xtest::fail "  FATAL: ${NMDDNS} loaded when NMG_REQUIRED=${NMG_REQUIRED}"

  unset NMG_REQUIRED
  local NMDDNS_REQUIRED="99.0.0"

  (source 2>/dev/null "${NMDDNS}") &&
    xtest::fail "FATAL: ${NMDDNS} loaded when NMDDNS_REQUIRED=${NMDDNS_REQUIRED}"

  shtest::reset_state

  shtest::log "  Version enforcement working"
}

xtest::onexit() {
  xrm "${XFILE-}"
}

xmain() { # <args>
  local XNOFILE="$TEST_OUT/no-file" XFILE="$TEST_OUT/ddns file"
  local NMDDNS=${NMDDNS:-${NMUTILS}/ddns-functions}

  xload_script "${NMDDNS}"

  test_version

  xtest::run_tests "ddns-functions Test Summary" "$@"
  local rc=$?

  xtest::onexit

  return $rc
}

xstart "$@"
