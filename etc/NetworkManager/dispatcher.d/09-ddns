#!/bin/bash
# -*- mode: sh; sh-basic-offset: 2; indent-tabs-mode: nil; -*-
# vim:set ft=sh et sw=2 ts=2:
#
# 09-ddns v1.2.1 - NetworkManager dispatch for ipv4 Dynamic DNS updates
# Author: Scott Shambarger <devel@shambarger.net>
#
# Copyright (C) 2014-2021 Scott Shambarger
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Instructions for use:
#
#   Put this script in /etc/NetworkManager/dispatcher.d (or wherever
#   your distro has these files), and nmddns-helper somewhere in
#   PATH.
#
#   The settings are discussed in NMUTILS/ddns-functions.
#
#   NOTE: By default, A and AAAA records use the global addresses
#   on an interface (see DDNS_RREC_<rrec>_PRIVATE to also consider
#   private addresses), so only set DDNS_RREC_A_VALUE or
#   DDNS_RREC_AAAA_VALUE if you wish to overrides those values
#   with static ones.
#
# Requires:
#
#   NMUTILS/ddns-functions - dynamic DNS functions
#   NMUTILS/general-functions - shared functions
#
# Config location:
#
#   NMCONF/ddns-<interface>.conf (see $NMUTILS/ddns-functions for settings)
#
# State file:
#
#   DDNS_STATE_DIR/ddns-<interface>-<rrec>.state
#
# shellcheck disable=SC1090,SC2153

# for logging
NMG_TAG=${NMG_TAG:-nmddns}

# set NMUTILS/NMCONF early, and allow environment to override
NMUTILS=${NMUTILS:-/etc/nmutils}
NMCONF=${NMCONF:-${NMUTILS}/conf}

########## SCRIPT START

# shellcheck disable=SC2034
NMDDNS_REQUIRED="1.4.4"

# load ddns-functions
NMDDNS=${NMDDNS:-${NMUTILS}/ddns-functions}
{ [[ -r ${NMDDNS} ]] && . "${NMDDNS}"; } || {
  echo 1>&2 "Unable to load ${NMDDNS}" && exit 2; }

[[ ${NMDDNS_VERSION} ]] || {
  nmg_err "${0##*/} requires NMDDNS v${NMDDNS_REQUIRED}+"; exit 2; }

ddns_addr4() {
  # <retvar>
  local priv='' addr alist=() rlist=()
  [[ ${DDNS_RREC_A_PRIVATE-} ]] && priv=1

  printf -v "${1-}" '' || return

  nmg::query_ips alist "" 4a "${interface}" || return

  for addr in ${alist[*]+"${alist[@]}"}; do
    addr=${addr%%/*}
    nmg_check_ip4_addr "${addr}" "${priv}" && rlist+=("${addr}")
  done

  local IFS=,
  printf -v "$1" %s "${rlist[*]-}"
}

ddns_addr6() {
  # <retvar>
  local priv='' addr alist=() rlist=()
  [[ ${DDNS_RREC_AAAA_PRIVATE-} ]] && priv=1

  printf -v "${1-}" '' || return

  nmg::query_ips alist "" 6a "${interface}" || return

  for addr in ${alist[*]+"${alist[@]}"}; do
    addr=${addr%%/*}
    nmg_check_ip6_addr "${addr}" "${priv}" &&
      nmg::wait_dad6 "${interface}" "${addr}" && rlist+=("${addr}")
  done

  local IFS=,
  printf -v "$1" %s "${rlist[*]-}"
}

function ddns_nm_action() {
  # <action>
  local addr4='' addr6=''

  # for convenience
  local config=${NMDDNS_CONFIG_PAT/@MATCH@/${interface}}
  local state_pat=${NMDDNS_STATE_PAT/@MATCH@/${interface}}

  nmddns_read_config "${config}" || return 0

  [[ -e ${DDNS_STATE_DIR} ]] || {
    [[ ${NM_DISPATCHER_ACTION} ]] || {
      nmg_err "STATE_DIR ${DDNS_STATE_DIR} missing; run from\
 NetworkManager as dispatcher to create with correct permissions!"
      return 1
    }
    nmg_cmd mkdir -p "${DDNS_STATE_DIR}" || return
  }

  case $1 in
    up|down)
      [[ $1 == up ]] && {
        ddns_addr4 addr4 || return
        ddns_addr6 addr6 || return
      }
      nmddns_spawn_update_all "$1" "${config}" \
                              "${addr4}" "${addr6}" "${state_pat}"
      ;;
    dhcp4-change)
      ddns_addr4 addr4 || return
      nmddns_spawn_update "${config}" "A" "${addr4}" "${state_pat}"
      ;;
    dhcp6-change)
      ddns_addr6 addr6 || return
      nmddns_spawn_update "${config}" "AAAA" "${addr6}" "${state_pat}"
      ;;
  esac
  return 0
}

if [[ ${1-} && ${2-} ]]; then

  # used in functions
  interface=$1

  # run from NM
  nmg_debug "interface: $interface action: $2"

  case $2 in
    up|down|dhcp4-change|dhcp6-change)
      ddns_nm_action "$2" || exit
      ;;
  esac
fi
: # for loading in tests
