#!/bin/bash
#
# 09-nmddns v1.0.1 - NetworkManager dispatch for ipv4 Dynamic DNS updates
# Author: Scott Shambarger <devel@shambarger.net>
#
# Copyright 2014 Scott Shambarger.  All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Instructions for use:
#
#   Put this script in /etc/NetworkManager/dispatcher.d (or wherever
#   your distro has these files), and nmddns-helper somewhere in
#   PATH.
#
#   The settings are discussed in NMUTILS/ddns-functions.
#
#   NOTE: By default, A and AAAA records use the first global
#   address on an interface (see DDNS_RREC_<rrec>_PRIVATE to also
#   consider private addresses), so only set DDNS_RREC_A_VALUE or
#   DDNS_RREC_AAAA_VALUE if you wish to overrides those values
#   with static ones.
#
# Requires:
#
#   NMUTILS/ddns-functions - dynamic DNS functions
#   NMUTILS/general-functions - shared functions
#
# Config location:
#
#   NMCONF/ddns-<interface>.conf (see $NMUTILS/ddns-functions for settings)
#
# State file:
#
#   RUNDIR/ddns-<interface>-<rrec>.state
#
interface="$1"
action="$2"

# for logging
NMG_TAG="${NMG_TAG:-ddns}"

# set NMUTILS/NMCONF early, and allow environment to override
NMUTILS="${NMUTILS:-/etc/nmutils}"
NMCONF="${NMCONF:-$NMUTILS/conf}"

########## Global defaults (customize in $NMCONF/general.conf)

########## Default paths

RUNDIR="${RUNDIR:-/run/nmutils}"

########## SCRIPT START

# anything for us to do?
[ -n "$interface" -a -n "$action" ] || exit 0

# load ddns-functions
NMDDNS="${NMDDNS:-$NMUTILS/ddns-functions}"
[ -f "$NMDDNS" -a -r "$NMDDNS" ] && . "$NMDDNS" || {
  echo 1>&2 "Unable to load $NMDDNS" && exit 2
}

########## Config/state locations

DDNS_CONFIG="${DDNS_CONFIG:-$NMCONF/ddns-${interface}.conf}"
# NOTE: *_PAT variables must have the @RREC@ keywords
DDNS_STATE_PAT="${DDNS_STATE_PAT:-$RUNDIR/ddns-${interface}-@RREC@.state}"

function ddns_addr4() {

  [ ${IP4_NUM_ADDRESSES:-0} -eq 0 ] && return 0

  local priv_ok=
  [ -n "$DDNS_RREC_A_PRIVATE" ] && priv_ok=1

  # choose first public address
  local idx= ddns_addr=
  for (( idx=0; idx < $IP4_NUM_ADDRESSES; idx++ )); do
    local addrgw=$(eval echo -n '$'IP4_ADDRESS_$idx)
    # remove gateway
    local addr=${addrgw%% *}
    nmg_check_ip4_addr "${addr%%/*}" "$priv_ok" && echo -n "$addr" && break
  done
}

function ddns_addr6() {

  [ ${IP6_NUM_ADDRESSES:-0} -eq 0 ] && return 0

  local priv_ok=
  [ -n "$DDNS_RREC_AAAA_PRIVATE" ] && priv_ok=1

  # choose first public address
  local idx=
  for (( idx=0; idx < $IP6_NUM_ADDRESSES; idx++ )); do
    local addrgw=$(eval echo -n '$'IP6_ADDRESS_$idx)
    # remove gateway
    local addr=${addrgw%% *}
    nmg_check_ip6_addr "${addr%%/*}" "$priv_ok" && echo -n "$addr" && break
  done
}

function ddns_action() {
  # <action>
  nmddns_spawn_update_all "$1" "$DDNS_CONFIG" "$(ddns_addr4)" "$(ddns_addr6)" "$DDNS_STATE_PAT"
}

nmg_debug "interface: $interface action: $action"

[ -e "$RUNDIR" ] || {
  nmg_need_progs "$MKDIR" || exit
  nmg_cmd "$MKDIR" -p "$RUNDIR" || exit
}

case "$action" in
  "up"|"down")
    ddns_action "$action"
    ;;
  "dhcp4-change")
    nmddns_spawn_update "$DDNS_CONFIG" "A" "$(ddns_addr4)" "$DDNS_STATE_PAT"
    ;;
  "dhcp6-change")
    nmddns_spawn_update "$DDNS_CONFIG" "AAAA" "$(ddns_addr6)" "$DDNS_STATE_PAT"
    ;;
esac
