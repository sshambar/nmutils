#!/bin/bash
#
# nmddns-helper v1.0.0 - NMUtils Dynamic DNS helper program
# Author: Scott Shambarger <devel@shambarger.net>
#
# Copyright 2014 Scott Shambarger.  All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Instructions for use:
#
#   Place somewhere in your dispatcher's PATH.  This helper is called
#   from nmddns_spawn_update to perform asynchronously DDNS updates,
#   and from boot scripts to perform DNS updates after the nameserver
#   has started.
#
#   Usage: nmddns-helper [<interface>] (from bootup, <interface> optional)
#   Usage: nmddns-helper <action> <config-file> <args>... (from ddns-functions)
#
# Requires:
#
#   $NMUTILS/ddns-functions - Dynamic DNS functions
#   $NMUTILS/general-functions - shared functions, used by ddns-functions
#
# Supported, but optional:
#
#   /etc/NetworkManager/dispatcher.d/09-ddns - NM trigger script
#   /etc/systemd/system/nmddns-onboot@<interface>.service (systemd)
#   rc.local (add "nmddns-helper [<interface>]")
#

# for logging
NMG_TAG="${NMG_TAG:-nmddns}"

# set NMUTILS/NMCONF early, and allow environment to override
NMUTILS="${NMUTILS:-/etc/nmutils}"
NMCONF="${NMCONF:-$NMUTILS/conf}"

########## Global defaults (customize in $NMCONF/general.conf)

########## Default paths

RUNDIR="${RUNDIR:-/run/nmutils}"

########## SCRIPT START

# load ddns-functions
NMDDNS="${NMDDNS:-$NMUTILS/ddns-functions}"
[ -f "$NMDDNS" -a -r "$NMDDNS" ] && . "$NMDDNS" || {
  echo 1>&2 "Unable to load $NMDDNS" && exit 2
}

########## Config locations

# NOTE: *_PAT variables must have @MATCH@ and @RREC@ keywords
DDNS_CONFIG_PAT="${DDNS_CONFIG_PAT:-$NMCONF/ddns-@MATCH@.conf}"
DDNS_STATE_PAT="${DDNS_STATE_PAT:-$RUNDIR/ddns-@MATCH@-@RREC@.state}"

function ddns_update() {
  # <rrec> [<value>]
  local rrec="$1" value="${2:-}" rc=0

  [ -n "$rrec" ] || return 0

  nmddns_update "$rrec" "$value" || rc=$?

  # allow server unreachable...
  [ $rc -eq 25 ] && return 0

  return $rc
}

function ddns_interface_rrec() {
  # <interface> <state-pat> <rrec>
  local intf="$1" state_pat="$2" rrec="$3"

  local state="${state_pat/@RREC@/$rrec}"

  local value=
  [ -f "$state" -a -r "$state" ] && value=$(< "$state")

  if [ -n "$value" ]; then
    # ensure if address, it can be found on the interface
    case "$rrec" in
      "A")
	value=$(nmg_find_ip4_addrs "$intf" "$value")
	;;
      "AAAA")
	value=$(nmg_find_ip6_addrs "$intf" "$value")
	;;
    esac
  fi

  ddns_update "$rrec" "$value"
}

function ddns_interface() {
  # [<interface>]
  local interface="${1:-}" rc=0

  local config_pre="${DDNS_CONFIG_PAT%@MATCH@*}"
  local config_post="${DDNS_CONFIG_PAT##*@MATCH@}"

  shopt -s nullglob
  local config=
  for config in "$config_pre"*"$config_post"; do

    # get match part
    local match="${config#$config_pre}"
    match="${match%$config_post}"
    [ -z "$match" ] && continue

    # find interface
    local intf="${match%%.conf}"
    intf="${intf%%-*}"

    # if we have an interface, make sure we filter for it
    [ -z "$interface" -o "$intf" = "$interface" ] || continue

    # load DDNS config
    nmddns_read_config "$config" || continue

    # get state file pattern
    local state_pat="${DDNS_STATE_PAT/@MATCH@/$match}"

    local name=
    for name in "${!DDNS_RREC_@}"; do
      name="${name#DDNS_RREC_}"
      [[ "$name" = *_NAME ]] || continue
      ddns_interface_rrec "$intf" "$state_pat" "${name%_NAME}" || rc=$?
    done
  done

  return $rc
}

function ddns_helper_action() {
  # <action> <config-file> <args>...
  local action="${1:-}" config="${2:-}"; shift 2

  case "$action" in
    "update")
      nmddns_required_config "$config"
      nmddns_update "$@"
      ;;
    "up"|"down")
      nmddns_required_config "$config"
      nmddns_update_all "$action" "$@"
      ;;
    *)
      echo 1>&2 "Usage: ${0##*/} [<interface>]"
      return 1
      ;;
  esac
}

[ -e "$RUNDIR" ] || {
  nmg_need_progs "$MKDIR" || exit
  nmg_cmd "$MKDIR" -p "$RUNDIR" || exit
}

if [ -z "${2:-}" ]; then
  ddns_interface "${1:-}"
else
  ddns_helper_action "$@"
fi
